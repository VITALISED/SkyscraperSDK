#pragma once
#include "pch.h"
#include "cTkTypes.h"
#include "Naming.h"

struct cGcRealityManager
{
	cGcRealityManagerData* mpData;
	cGcSubstanceTable* mpSubstanceTable;
	cGcTechnologyTable* mpTechnologyTable;
	cGcProductTable* mpProductTable;
	cGcProceduralProductTable* mpProceduralProductTable;
	cGcProceduralTechnologyTable* mpProceduralTechTable;
	cGcLegacyItemTable* mpLegacyItemsTable;
	cGcTechBoxTable* mpTechBoxProductTable;
	cGcConsumableItemTable* mpConsumableItemTable;
	cGcRecipeTable* mpRecipeTable;
	cGcStoriesTable* mpStoriesTable;
	cGcRewardTable* mpRewardTable;
	cGcDiscoveryRewardLookupTable* mpDiscoveryRewardTable;
	cGcMissionTable* mapMissionTables[21];
	cGcMissionSchedulesTable* mpMissionSchedulesTable;
	cGcMissionCommunityData* mpMissionCommunityData;
	cGcInventoryTable* mpInventoryTable;
	cGcMaintenanceGroupsTable* mpMaintenanceGroupsTable;
	float mMaintenanceGroupTotalWeightings[7];
	cGcUnlockableTrees* mpUnlockableTrees;
	cGcPlayerEmoteList* mpEmotesList;
	cGcPlayerDamageTable* mpPlayerDamageTable;
	cGcPurchaseableBuildingBlueprints* mpPurchaseableBuildingsTable;
	cGcPurchaseableSpecials* mpPurchaseableSpecialsTables;
	cGcUnlockableSeasonRewards* mpUnlockableSeasonRewardsTable;
	cGcUnlockableTwitchRewards* mpUnlockableTwitchRewardsTable;
	cGcUnlockablePlatformRewards* mpUnlockablePlatformRewardsTable;
	cGcSettlementPerksTable* mpSettlementPerksTable;
	cGcWiki* mpWiki;
	cGcWiki* mpCatalogue;
	cGcWiki* mapCatalogues[5];
	cGcItemCostTable* mpItemCostTable;
	cGcTradingClassTable* mpTradingClassTable;
	cGcCostTable* mpCostTable;
	cGcPlayerWeaponPropertiesTable* mpPlayerWeaponPropertiesTable;
	cGcCombatEffectsTable* mpCombatEffectsTable;
	cGcPlayerTitleData* mpPlayerTitleData;
	std::unordered_map<TkID<128>, cGcPlayerTitle*, TkIDUnorderedMap::Hash128, std::equal_to<TkID<128> >, TkSTLAllocatorShim<std::pair<TkID<128> const, cGcPlayerTitle*>> > mTitleIDMap;
	std::vector<cGcTechnology*, TkSTLAllocatorShim<cGcTechnology*, 8, -1> > mPendingNewTechnologies;
	std::unordered_map<TkID<128>, cGcRealitySubstanceData*, TkIDUnorderedMap::Hash128, std::equal_to<TkID<128> >, TkSTLAllocatorShim<std::pair<TkID<128> const, cGcRealitySubstanceData*>> > mSubstanceIDMap;
	std::unordered_map<TkID<128>, cGcTechnology*, TkIDUnorderedMap::Hash128, std::equal_to<TkID<128> >, TkSTLAllocatorShim<std::pair<TkID<128> const, cGcTechnology*>> > mTechnologyIDMap;
	std::unordered_map<TkID<128>, cGcProceduralTechnologyData*, TkIDUnorderedMap::Hash128, std::equal_to<TkID<128> >, TkSTLAllocatorShim<std::pair<TkID<128> const, cGcProceduralTechnologyData*>> > mProcTechnologyIDMap;
	std::unordered_map<TkID<128>, cGcProductData*, TkIDUnorderedMap::Hash128, std::equal_to<TkID<128> >, TkSTLAllocatorShim<std::pair<TkID<128> const, cGcProductData*>> > mProductIDMap;
	std::unordered_map<TkID<128>, enum eProceduralProductCategory, TkIDUnorderedMap::Hash128, std::equal_to<TkID<128> >, TkSTLAllocatorShim<std::pair<TkID<128> const, enum eProceduralProductCategory>> > mProcProductIDMap;
	robin_hood::detail::Table<1, 80, unsigned int, TkID<128>, robin_hood::hash<unsigned int, void>, std::equal_to<unsigned int>> mHashedTechIDMap;
	std::unordered_map<TkID<128>, cGcLegacyItem*, TkIDUnorderedMap::Hash128, std::equal_to<TkID<128> >, TkSTLAllocatorShim<std::pair<TkID<128> const, cGcLegacyItem*>> > mLegacyItemIDMap;
	std::unordered_map<TkID<128>, cGcConsumableItem*, TkIDUnorderedMap::Hash128, std::equal_to<TkID<128> >, TkSTLAllocatorShim<std::pair<TkID<128> const, cGcConsumableItem*>> > mConsumableItemIDMap;
	std::unordered_map<TkID<256>, cGcRefinerRecipe*, TkIDUnorderedMap::Hash256, std::equal_to<TkID<256> >, TkSTLAllocatorShim<std::pair<TkID<256> const, cGcRefinerRecipe*>> > mRecipeIDMap;
	std::unordered_map<TkID<128>, cGcDamageMultiplierLookup*, TkIDUnorderedMap::Hash128, std::equal_to<TkID<128> >, TkSTLAllocatorShim<std::pair<TkID<128> const, cGcDamageMultiplierLookup*>> > mDamageMultiplierIDMap;
	std::unordered_map<TkID<128>, cGcRewardTableEntry*, TkIDUnorderedMap::Hash128, std::equal_to<TkID<128> >, TkSTLAllocatorShim<std::pair<TkID<128> const, cGcRewardTableEntry*>> > mRewardIDMap;
	std::unordered_map<TkID<128>, cGcRewardTableItemList*, TkIDUnorderedMap::Hash128, std::equal_to<TkID<128> >, TkSTLAllocatorShim<std::pair<TkID<128> const, cGcRewardTableItemList*>> > mGenericRewardIDMap;
	std::unordered_map<TkID<128>, cGcRewardTableEntitlementItem*, TkIDUnorderedMap::Hash128, std::equal_to<TkID<128> >, TkSTLAllocatorShim<std::pair<TkID<128> const, cGcRewardTableEntitlementItem*>> > mEntitlementRewardIDMap;
	std::unordered_map<TkID<128>, cGcDiscoveryRewardLookup*, TkIDUnorderedMap::Hash128, std::equal_to<TkID<128> >, TkSTLAllocatorShim<std::pair<TkID<128> const, cGcDiscoveryRewardLookup*>> > mDiscoveryRewardIDMap;
	std::unordered_map<TkID<128>, cGcRewardTableItemList*, TkIDUnorderedMap::Hash128, std::equal_to<TkID<128> >, TkSTLAllocatorShim<std::pair<TkID<128> const, cGcRewardTableItemList*>> > mMixerRewardIDMap;
	std::unordered_map<TkID<128>, cGcPurchaseableSpecial*, TkIDUnorderedMap::Hash128, std::equal_to<TkID<128> >, TkSTLAllocatorShim<std::pair<TkID<128> const, cGcPurchaseableSpecial*>> > mPurchaseableSpecialsIDMap;
	std::unordered_map<TkID<128>, cGcUnlockableSeasonReward*, TkIDUnorderedMap::Hash128, std::equal_to<TkID<128> >, TkSTLAllocatorShim<std::pair<TkID<128> const, cGcUnlockableSeasonReward*>> > mUnlockableSeasonRewardsIDMap;
	std::unordered_map<TkID<128>, cGcUnlockableTwitchReward*, TkIDUnorderedMap::Hash128, std::equal_to<TkID<128> >, TkSTLAllocatorShim<std::pair<TkID<128> const, cGcUnlockableTwitchReward*>> > mUnlockableTwitchRewardsIDMap;
	std::unordered_map<TkID<128>, cGcUnlockablePlatformReward*, TkIDUnorderedMap::Hash128, std::equal_to<TkID<128> >, TkSTLAllocatorShim<std::pair<TkID<128> const, cGcUnlockablePlatformReward*>> > mUnlockablePlatformRewardsIDMap;
	std::unordered_map<TkID<128>, cGcSettlementPerkData*, TkIDUnorderedMap::Hash128, std::equal_to<TkID<128> >, TkSTLAllocatorShim<std::pair<TkID<128> const, cGcSettlementPerkData*>> > mSettlementPerksIDMap;
	std::unordered_map<TkID<128>, cGcPlayerDamageData*, TkIDUnorderedMap::Hash128, std::equal_to<TkID<128> >, TkSTLAllocatorShim<std::pair<TkID<128> const, cGcPlayerDamageData*>> > mDamageIDMap;
	std::unordered_map<TkID<128>, cGcInventoryTableEntry*, TkIDUnorderedMap::Hash128, std::equal_to<TkID<128> >, TkSTLAllocatorShim<std::pair<TkID<128> const, cGcInventoryTableEntry*>> > mInventoryRewardIDMap;
	std::unordered_map<TkID<128>, cGcCostTableEntry*, TkIDUnorderedMap::Hash128, std::equal_to<TkID<128> >, TkSTLAllocatorShim<std::pair<TkID<128> const, cGcCostTableEntry*>> > mCostIDMap;
	std::unordered_map<TkID<128>, cGcInventoryBaseStat*, TkIDUnorderedMap::Hash128, std::equal_to<TkID<128> >, TkSTLAllocatorShim<std::pair<TkID<128> const, cGcInventoryBaseStat*>> > mBaseStatIDMap;
	std::unordered_map<TkID<128>, cGcItemCostData*, TkIDUnorderedMap::Hash128, std::equal_to<TkID<128> >, TkSTLAllocatorShim<std::pair<TkID<128> const, cGcItemCostData*>> > mItemCostIDMap;
	std::unordered_map<TkID<128>, cGcRealityManager::MissionLookup, TkIDUnorderedMap::Hash128, std::equal_to<TkID<128> >, TkSTLAllocatorShim<std::pair<TkID<128> const, cGcRealityManager::MissionLookup>> > mMissionIDMap;
	std::unordered_map<TkID<128>, cGcPlayerEmote*, TkIDUnorderedMap::Hash128, std::equal_to<TkID<128> >, TkSTLAllocatorShim<std::pair<TkID<128> const, cGcPlayerEmote*>> > mEmoteIDMap;
	std::unordered_map<TkID<128>, cGcGenericMissionSequence*, TkIDUnorderedMap::Hash128, std::equal_to<TkID<128> >, TkSTLAllocatorShim<std::pair<TkID<128> const, cGcGenericMissionSequence*>> > mCostToMissionMap;
	std::unordered_map<TkID<128>, cGcGenericMissionSequence*, TkIDUnorderedMap::Hash128, std::equal_to<TkID<128> >, TkSTLAllocatorShim<std::pair<TkID<128> const, cGcGenericMissionSequence*>> > mRewardToMissionMap;
	std::unordered_map<TkID<256>, cGcGenericMissionSequence*, TkIDUnorderedMap::Hash256, std::equal_to<TkID<256> >, TkSTLAllocatorShim<std::pair<TkID<256> const, cGcGenericMissionSequence*>> > mDialogToMissionMap;
	std::unordered_map<TkID<256>, cGcGenericMissionSequence*, TkIDUnorderedMap::Hash256, std::equal_to<TkID<256> >, TkSTLAllocatorShim<std::pair<TkID<256> const, cGcGenericMissionSequence*>> > mScanEventToMissionMap;
	std::unordered_map<TkID<128>, std::vector<TkID<128>, TkSTLAllocatorShim<TkID<128>> >, TkIDUnorderedMap::Hash128, std::equal_to<TkID<128> >, TkSTLAllocatorShim<std::pair<TkID<128> const, std::vector<TkID<128>, TkSTLAllocatorShim<TkID<128>> > >> > mRealityItemGroupsIDMap;
	std::unordered_map<TkID<256>, cTkTextureResource*, TkIDUnorderedMap::Hash256, std::equal_to<TkID<256> >, TkSTLAllocatorShim<std::pair<TkID<256> const, cTkTextureResource*>> > mRealityIconResourceMap;
	std::vector<PuzzleOptionOverride, TkSTLAllocatorShim<PuzzleOptionOverride> > maPuzzleOptionOverrides;
	robin_hood::detail::Table<1, 80, TkID<256>, void, robin_hood::hash<TkID<256>, void>, std::equal_to<TkID<256> >> mWikiTopics;
	cGcGalaxyInfoIcons* mpGalacticMapIcons;
	cGcAlienSpeechTable* mpAlienWords;
	cGcNameGenerator mNameGenerator;
	std::vector<cGcTechnology*, TkSTLAllocatorShim<cGcTechnology*, 8, -1> > mapRepairTechs;
	std::vector<std::pair<cGcAlienPuzzleTable const*, int>, TkSTLAllocatorShim<std::pair<cGcAlienPuzzleTable const*, int>, 8, -1> > mapAlienPuzzleTables;
	cGcDialogClearanceTable* mpDialogClearanceTable;
	std::array<cTkTextureResource, 6> maDynamicHazardProtectionIcons;
};